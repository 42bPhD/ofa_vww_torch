# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class MobileNetV1(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(MobileNetV1, self).__init__()
        self.module_0 = py_nndct.nn.Input() #MobileNetV1::input_0(MobileNetV1::nndct_input_0)
        self.module_1 = py_nndct.nn.Conv2d(in_channels=3, out_channels=8, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/Conv2d[conv1]/ret.3(MobileNetV1::nndct_conv2d_1)
        self.module_2 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu1]/ret.7(MobileNetV1::nndct_relu_2)
        self.module_3 = py_nndct.nn.Conv2d(in_channels=8, out_channels=8, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=8, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv2_1]/Conv2d[depthwise]/ret.9(MobileNetV1::nndct_depthwise_conv2d_3)
        self.module_4 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu2_1]/ret.13(MobileNetV1::nndct_relu_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=8, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv2_2]/Conv2d[pointwise]/ret.15(MobileNetV1::nndct_conv2d_5)
        self.module_6 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu2_2]/ret.19(MobileNetV1::nndct_relu_6)
        self.module_7 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=16, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv3_1]/Conv2d[depthwise]/ret.21(MobileNetV1::nndct_depthwise_conv2d_7)
        self.module_8 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu3_1]/ret.25(MobileNetV1::nndct_relu_8)
        self.module_9 = py_nndct.nn.Conv2d(in_channels=16, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv3_2]/Conv2d[pointwise]/ret.27(MobileNetV1::nndct_conv2d_9)
        self.module_10 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu3_2]/ret.31(MobileNetV1::nndct_relu_10)
        self.module_11 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=32, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv4_1]/Conv2d[depthwise]/ret.33(MobileNetV1::nndct_depthwise_conv2d_11)
        self.module_12 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu4_1]/ret.37(MobileNetV1::nndct_relu_12)
        self.module_13 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv4_2]/Conv2d[pointwise]/ret.39(MobileNetV1::nndct_conv2d_13)
        self.module_14 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu4_2]/ret.43(MobileNetV1::nndct_relu_14)
        self.module_15 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=32, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv5_1]/Conv2d[depthwise]/ret.45(MobileNetV1::nndct_depthwise_conv2d_15)
        self.module_16 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu5_1]/ret.49(MobileNetV1::nndct_relu_16)
        self.module_17 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv5_2]/Conv2d[pointwise]/ret.51(MobileNetV1::nndct_conv2d_17)
        self.module_18 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu5_2]/ret.55(MobileNetV1::nndct_relu_18)
        self.module_19 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=64, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv6_1]/Conv2d[depthwise]/ret.57(MobileNetV1::nndct_depthwise_conv2d_19)
        self.module_20 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu6_1]/ret.61(MobileNetV1::nndct_relu_20)
        self.module_21 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv6_2]/Conv2d[pointwise]/ret.63(MobileNetV1::nndct_conv2d_21)
        self.module_22 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu6_2]/ret.67(MobileNetV1::nndct_relu_22)
        self.module_23 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=64, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv7_1]/Conv2d[depthwise]/ret.69(MobileNetV1::nndct_depthwise_conv2d_23)
        self.module_24 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu7_1]/ret.73(MobileNetV1::nndct_relu_24)
        self.module_25 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv7_2]/Conv2d[pointwise]/ret.75(MobileNetV1::nndct_conv2d_25)
        self.module_26 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu7_2]/ret.79(MobileNetV1::nndct_relu_26)
        self.module_27 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv8_1]/Conv2d[depthwise]/ret.81(MobileNetV1::nndct_depthwise_conv2d_27)
        self.module_28 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu8_1]/ret.85(MobileNetV1::nndct_relu_28)
        self.module_29 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv8_2]/Conv2d[pointwise]/ret.87(MobileNetV1::nndct_conv2d_29)
        self.module_30 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu8_2]/ret.91(MobileNetV1::nndct_relu_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv9_1]/Conv2d[depthwise]/ret.93(MobileNetV1::nndct_depthwise_conv2d_31)
        self.module_32 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu9_1]/ret.97(MobileNetV1::nndct_relu_32)
        self.module_33 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv9_2]/Conv2d[pointwise]/ret.99(MobileNetV1::nndct_conv2d_33)
        self.module_34 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu9_2]/ret.103(MobileNetV1::nndct_relu_34)
        self.module_35 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv10_1]/Conv2d[depthwise]/ret.105(MobileNetV1::nndct_depthwise_conv2d_35)
        self.module_36 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu10_1]/ret.109(MobileNetV1::nndct_relu_36)
        self.module_37 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv10_2]/Conv2d[pointwise]/ret.111(MobileNetV1::nndct_conv2d_37)
        self.module_38 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu10_2]/ret.115(MobileNetV1::nndct_relu_38)
        self.module_39 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv11_1]/Conv2d[depthwise]/ret.117(MobileNetV1::nndct_depthwise_conv2d_39)
        self.module_40 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu11_1]/ret.121(MobileNetV1::nndct_relu_40)
        self.module_41 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv11_2]/Conv2d[pointwise]/ret.123(MobileNetV1::nndct_conv2d_41)
        self.module_42 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu11_2]/ret.127(MobileNetV1::nndct_relu_42)
        self.module_43 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv12_1]/Conv2d[depthwise]/ret.129(MobileNetV1::nndct_depthwise_conv2d_43)
        self.module_44 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu12_1]/ret.133(MobileNetV1::nndct_relu_44)
        self.module_45 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv12_2]/Conv2d[pointwise]/ret.135(MobileNetV1::nndct_conv2d_45)
        self.module_46 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu12_2]/ret.139(MobileNetV1::nndct_relu_46)
        self.module_47 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv13_1]/Conv2d[depthwise]/ret.141(MobileNetV1::nndct_depthwise_conv2d_47)
        self.module_48 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu13_1]/ret.145(MobileNetV1::nndct_relu_48)
        self.module_49 = py_nndct.nn.Conv2d(in_channels=128, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv13_2]/Conv2d[pointwise]/ret.147(MobileNetV1::nndct_conv2d_49)
        self.module_50 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu13_2]/ret.151(MobileNetV1::nndct_relu_50)
        self.module_51 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=256, bias=True) #MobileNetV1::MobileNetV1/DepthwiseConv2D[conv14_1]/Conv2d[depthwise]/ret.153(MobileNetV1::nndct_depthwise_conv2d_51)
        self.module_52 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu14_1]/ret.157(MobileNetV1::nndct_relu_52)
        self.module_53 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #MobileNetV1::MobileNetV1/PointwieConv2D[conv14_2]/Conv2d[pointwise]/ret.159(MobileNetV1::nndct_conv2d_53)
        self.module_54 = py_nndct.nn.ReLU(inplace=False) #MobileNetV1::MobileNetV1/ReLU[relu14_2]/ret.163(MobileNetV1::nndct_relu_54)
        self.module_55 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #MobileNetV1::MobileNetV1/AdaptiveAvgPool2d[avgpool]/4334(MobileNetV1::nndct_adaptive_avg_pool2d_55)
        self.module_56 = py_nndct.nn.Module('nndct_flatten') #MobileNetV1::MobileNetV1/Flatten[flatten]/ret.165(MobileNetV1::nndct_flatten_56)
        self.module_57 = py_nndct.nn.Linear(in_features=256, out_features=2, bias=True) #MobileNetV1::MobileNetV1/Linear[dense]/ret.167(MobileNetV1::nndct_dense_57)
        self.module_58 = py_nndct.nn.Softmax(dim=1) #MobileNetV1::MobileNetV1/Softmax[softmax]/ret(MobileNetV1::nndct_softmax_58)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(output_module_0)
        output_module_0 = self.module_2(output_module_0)
        output_module_0 = self.module_3(output_module_0)
        output_module_0 = self.module_4(output_module_0)
        output_module_0 = self.module_5(output_module_0)
        output_module_0 = self.module_6(output_module_0)
        output_module_0 = self.module_7(output_module_0)
        output_module_0 = self.module_8(output_module_0)
        output_module_0 = self.module_9(output_module_0)
        output_module_0 = self.module_10(output_module_0)
        output_module_0 = self.module_11(output_module_0)
        output_module_0 = self.module_12(output_module_0)
        output_module_0 = self.module_13(output_module_0)
        output_module_0 = self.module_14(output_module_0)
        output_module_0 = self.module_15(output_module_0)
        output_module_0 = self.module_16(output_module_0)
        output_module_0 = self.module_17(output_module_0)
        output_module_0 = self.module_18(output_module_0)
        output_module_0 = self.module_19(output_module_0)
        output_module_0 = self.module_20(output_module_0)
        output_module_0 = self.module_21(output_module_0)
        output_module_0 = self.module_22(output_module_0)
        output_module_0 = self.module_23(output_module_0)
        output_module_0 = self.module_24(output_module_0)
        output_module_0 = self.module_25(output_module_0)
        output_module_0 = self.module_26(output_module_0)
        output_module_0 = self.module_27(output_module_0)
        output_module_0 = self.module_28(output_module_0)
        output_module_0 = self.module_29(output_module_0)
        output_module_0 = self.module_30(output_module_0)
        output_module_0 = self.module_31(output_module_0)
        output_module_0 = self.module_32(output_module_0)
        output_module_0 = self.module_33(output_module_0)
        output_module_0 = self.module_34(output_module_0)
        output_module_0 = self.module_35(output_module_0)
        output_module_0 = self.module_36(output_module_0)
        output_module_0 = self.module_37(output_module_0)
        output_module_0 = self.module_38(output_module_0)
        output_module_0 = self.module_39(output_module_0)
        output_module_0 = self.module_40(output_module_0)
        output_module_0 = self.module_41(output_module_0)
        output_module_0 = self.module_42(output_module_0)
        output_module_0 = self.module_43(output_module_0)
        output_module_0 = self.module_44(output_module_0)
        output_module_0 = self.module_45(output_module_0)
        output_module_0 = self.module_46(output_module_0)
        output_module_0 = self.module_47(output_module_0)
        output_module_0 = self.module_48(output_module_0)
        output_module_0 = self.module_49(output_module_0)
        output_module_0 = self.module_50(output_module_0)
        output_module_0 = self.module_51(output_module_0)
        output_module_0 = self.module_52(output_module_0)
        output_module_0 = self.module_53(output_module_0)
        output_module_0 = self.module_54(output_module_0)
        output_module_0 = self.module_55(output_module_0)
        output_module_0 = self.module_56(input=output_module_0, start_dim=1, end_dim=-1)
        output_module_0 = self.module_57(output_module_0)
        output_module_0 = self.module_58(output_module_0)
        return output_module_0
